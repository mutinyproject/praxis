#!/bin/sh

. ./riot-functions.sh

me="riot-merge"

if [ "$#" -ne 2 ];then
    die --info "usage: ${me} <source> <destination>"
fi

export TMPDIR="${TMPDIR:-/tmp}"
src=$(readlink -f "${1}")
dest=$(readlink -f "${2}")

for d in "${src}" "${dest}";do
    [ -d "${d}" ] || die "Directory \"${d}\" does not exist"
done

merge_handler() {
    src="${1}"
    dest="${2}"
    shift 2

    for file in "${@}";do
        file_dest="${dest}/${file#${src}/}"
        printf '%s\n' "${file_dest}" >> "${filelist}"
        [ -d "${file}" ] && type=d
        [ -f "${file}" ] && type=f
        [ -L "${file}" ] && type=L
        [ -p "${file}" ] && type=p
        [ -S "${file}" ] && type=S
        case "${type}" in
            d)
                if [ ! -d "${file_dest}" ];then
                    file_mode=$(stat -f '%a' "${file}")
                    edebug mkdir -m "${file}" -p "${file_dest}"
                fi
            ;;
            f) edebug mv -f "${file}" "${file_dest}" ;;
            L)
                if [ -d "${file}" ] && [ -d "${file_dest}" ];then
                    edebug ln -sfn $(readlink "${file}") "${file_dest}"
                elif [ -d "${file}" ] && ! [ -d "${file_dest}" ];then
                    edebug mkdir "${file_dest}"
                elif ! [ -d "${file}" ];then
                    edebug mv -f "${file}" "${file_dest}"
                else
                    die "Not sure how to merge ${file}, type ${type}"
                fi
            ;;
            *)
                die "Unhandled type during merging: ${file}, type ${type}"
            ;;
        esac
    done
}

export filelist=$(mktemp riot-merge_filelist.XXXXXX)
recurse "${src}" "merge_handler \"${src}\" \"${dest}\""
